
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bbe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000c32  2**0
                  ALLOC
  2 .stab         00000e28  00000000  00000000  00000c34  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000061a  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b4 04 	jmp	0x968	; 0x968 <__vector_1>
   8:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__vector_2>
   c:	0c 94 56 05 	jmp	0xaac	; 0xaac <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b3 05 	call	0xb66	; 0xb66 <main>
  74:	0c 94 dd 05 	jmp	0xbba	; 0xbba <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8SetPinDirection>:
#include"DIO_register.h"
#include"DIO_config.h"
#include"DIO_private.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	28 97       	sbiw	r28, 0x08	; 8
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	8a 83       	std	Y+2, r24	; 0x02
  92:	6b 83       	std	Y+3, r22	; 0x03
  94:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0; //0 means no error, 1 means input error
  96:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin<=DIO_u8PIN7)
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	08 f0       	brcs	.+2      	; 0xa0 <DIO_u8SetPinDirection+0x24>
  9e:	f4 c0       	rjmp	.+488    	; 0x288 <DIO_u8SetPinDirection+0x20c>
	{
		if (Copy_u8Direction==DIO_u8PIN_INPUT)
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	88 23       	and	r24, r24
  a4:	09 f0       	breq	.+2      	; 0xa8 <DIO_u8SetPinDirection+0x2c>
  a6:	77 c0       	rjmp	.+238    	; 0x196 <DIO_u8SetPinDirection+0x11a>
		{
			switch (Copy_u8Port)
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	28 2f       	mov	r18, r24
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	38 87       	std	Y+8, r19	; 0x08
  b0:	2f 83       	std	Y+7, r18	; 0x07
  b2:	8f 81       	ldd	r24, Y+7	; 0x07
  b4:	98 85       	ldd	r25, Y+8	; 0x08
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	91 05       	cpc	r25, r1
  ba:	59 f1       	breq	.+86     	; 0x112 <DIO_u8SetPinDirection+0x96>
  bc:	2f 81       	ldd	r18, Y+7	; 0x07
  be:	38 85       	ldd	r19, Y+8	; 0x08
  c0:	22 30       	cpi	r18, 0x02	; 2
  c2:	31 05       	cpc	r19, r1
  c4:	2c f4       	brge	.+10     	; 0xd0 <DIO_u8SetPinDirection+0x54>
  c6:	8f 81       	ldd	r24, Y+7	; 0x07
  c8:	98 85       	ldd	r25, Y+8	; 0x08
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	69 f0       	breq	.+26     	; 0xe8 <DIO_u8SetPinDirection+0x6c>
  ce:	60 c0       	rjmp	.+192    	; 0x190 <DIO_u8SetPinDirection+0x114>
  d0:	2f 81       	ldd	r18, Y+7	; 0x07
  d2:	38 85       	ldd	r19, Y+8	; 0x08
  d4:	22 30       	cpi	r18, 0x02	; 2
  d6:	31 05       	cpc	r19, r1
  d8:	89 f1       	breq	.+98     	; 0x13c <DIO_u8SetPinDirection+0xc0>
  da:	8f 81       	ldd	r24, Y+7	; 0x07
  dc:	98 85       	ldd	r25, Y+8	; 0x08
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	91 05       	cpc	r25, r1
  e2:	09 f4       	brne	.+2      	; 0xe6 <DIO_u8SetPinDirection+0x6a>
  e4:	40 c0       	rjmp	.+128    	; 0x166 <DIO_u8SetPinDirection+0xea>
  e6:	54 c0       	rjmp	.+168    	; 0x190 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA, Copy_u8Pin); break;
  e8:	aa e3       	ldi	r26, 0x3A	; 58
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	ea e3       	ldi	r30, 0x3A	; 58
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	48 2f       	mov	r20, r24
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 2e       	mov	r0, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_u8SetPinDirection+0x8a>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_u8SetPinDirection+0x86>
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	8c 93       	st	X, r24
 110:	bd c0       	rjmp	.+378    	; 0x28c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB, Copy_u8Pin); break;
 112:	a7 e3       	ldi	r26, 0x37	; 55
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e7 e3       	ldi	r30, 0x37	; 55
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	48 2f       	mov	r20, r24
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	28 2f       	mov	r18, r24
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 2e       	mov	r0, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_u8SetPinDirection+0xb4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_u8SetPinDirection+0xb0>
 134:	80 95       	com	r24
 136:	84 23       	and	r24, r20
 138:	8c 93       	st	X, r24
 13a:	a8 c0       	rjmp	.+336    	; 0x28c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC, Copy_u8Pin); break;
 13c:	a4 e3       	ldi	r26, 0x34	; 52
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e4 e3       	ldi	r30, 0x34	; 52
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	48 2f       	mov	r20, r24
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 2e       	mov	r0, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_u8SetPinDirection+0xde>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_u8SetPinDirection+0xda>
 15e:	80 95       	com	r24
 160:	84 23       	and	r24, r20
 162:	8c 93       	st	X, r24
 164:	93 c0       	rjmp	.+294    	; 0x28c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD, Copy_u8Pin); break;
 166:	a1 e3       	ldi	r26, 0x31	; 49
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	e1 e3       	ldi	r30, 0x31	; 49
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	48 2f       	mov	r20, r24
 172:	8b 81       	ldd	r24, Y+3	; 0x03
 174:	28 2f       	mov	r18, r24
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 2e       	mov	r0, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_u8SetPinDirection+0x108>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_u8SetPinDirection+0x104>
 188:	80 95       	com	r24
 18a:	84 23       	and	r24, r20
 18c:	8c 93       	st	X, r24
 18e:	7e c0       	rjmp	.+252    	; 0x28c <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1; break;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	7b c0       	rjmp	.+246    	; 0x28c <DIO_u8SetPinDirection+0x210>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
 196:	8c 81       	ldd	r24, Y+4	; 0x04
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	09 f0       	breq	.+2      	; 0x19e <DIO_u8SetPinDirection+0x122>
 19c:	72 c0       	rjmp	.+228    	; 0x282 <DIO_u8SetPinDirection+0x206>
		{
			switch (Copy_u8Port)
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	28 2f       	mov	r18, r24
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	3e 83       	std	Y+6, r19	; 0x06
 1a6:	2d 83       	std	Y+5, r18	; 0x05
 1a8:	8d 81       	ldd	r24, Y+5	; 0x05
 1aa:	9e 81       	ldd	r25, Y+6	; 0x06
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	91 05       	cpc	r25, r1
 1b0:	49 f1       	breq	.+82     	; 0x204 <DIO_u8SetPinDirection+0x188>
 1b2:	2d 81       	ldd	r18, Y+5	; 0x05
 1b4:	3e 81       	ldd	r19, Y+6	; 0x06
 1b6:	22 30       	cpi	r18, 0x02	; 2
 1b8:	31 05       	cpc	r19, r1
 1ba:	2c f4       	brge	.+10     	; 0x1c6 <DIO_u8SetPinDirection+0x14a>
 1bc:	8d 81       	ldd	r24, Y+5	; 0x05
 1be:	9e 81       	ldd	r25, Y+6	; 0x06
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	61 f0       	breq	.+24     	; 0x1dc <DIO_u8SetPinDirection+0x160>
 1c4:	5b c0       	rjmp	.+182    	; 0x27c <DIO_u8SetPinDirection+0x200>
 1c6:	2d 81       	ldd	r18, Y+5	; 0x05
 1c8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ca:	22 30       	cpi	r18, 0x02	; 2
 1cc:	31 05       	cpc	r19, r1
 1ce:	71 f1       	breq	.+92     	; 0x22c <DIO_u8SetPinDirection+0x1b0>
 1d0:	8d 81       	ldd	r24, Y+5	; 0x05
 1d2:	9e 81       	ldd	r25, Y+6	; 0x06
 1d4:	83 30       	cpi	r24, 0x03	; 3
 1d6:	91 05       	cpc	r25, r1
 1d8:	e9 f1       	breq	.+122    	; 0x254 <DIO_u8SetPinDirection+0x1d8>
 1da:	50 c0       	rjmp	.+160    	; 0x27c <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA, Copy_u8Pin); break;
 1dc:	aa e3       	ldi	r26, 0x3A	; 58
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	ea e3       	ldi	r30, 0x3A	; 58
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	48 2f       	mov	r20, r24
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 2e       	mov	r0, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_u8SetPinDirection+0x17e>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	0a 94       	dec	r0
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_u8SetPinDirection+0x17a>
 1fe:	84 2b       	or	r24, r20
 200:	8c 93       	st	X, r24
 202:	44 c0       	rjmp	.+136    	; 0x28c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB, Copy_u8Pin); break;
 204:	a7 e3       	ldi	r26, 0x37	; 55
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e7 e3       	ldi	r30, 0x37	; 55
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 2e       	mov	r0, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_u8SetPinDirection+0x1a6>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	0a 94       	dec	r0
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_u8SetPinDirection+0x1a2>
 226:	84 2b       	or	r24, r20
 228:	8c 93       	st	X, r24
 22a:	30 c0       	rjmp	.+96     	; 0x28c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC, Copy_u8Pin); break;
 22c:	a4 e3       	ldi	r26, 0x34	; 52
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e4 e3       	ldi	r30, 0x34	; 52
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	48 2f       	mov	r20, r24
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 2e       	mov	r0, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_u8SetPinDirection+0x1ce>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_u8SetPinDirection+0x1ca>
 24e:	84 2b       	or	r24, r20
 250:	8c 93       	st	X, r24
 252:	1c c0       	rjmp	.+56     	; 0x28c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD, Copy_u8Pin); break;
 254:	a1 e3       	ldi	r26, 0x31	; 49
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e1 e3       	ldi	r30, 0x31	; 49
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	48 2f       	mov	r20, r24
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	28 2f       	mov	r18, r24
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 2e       	mov	r0, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_u8SetPinDirection+0x1f6>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_u8SetPinDirection+0x1f2>
 276:	84 2b       	or	r24, r20
 278:	8c 93       	st	X, r24
 27a:	08 c0       	rjmp	.+16     	; 0x28c <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1; break;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	05 c0       	rjmp	.+10     	; 0x28c <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
 28c:	89 81       	ldd	r24, Y+1	; 0x01
}
 28e:	28 96       	adiw	r28, 0x08	; 8
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	08 95       	ret

000002a0 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <DIO_u8SetPortDirection+0x6>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <DIO_u8SetPortDirection+0x8>
 2a8:	0f 92       	push	r0
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	8a 83       	std	Y+2, r24	; 0x02
 2b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 2b2:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	3d 83       	std	Y+5, r19	; 0x05
 2bc:	2c 83       	std	Y+4, r18	; 0x04
 2be:	8c 81       	ldd	r24, Y+4	; 0x04
 2c0:	9d 81       	ldd	r25, Y+5	; 0x05
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	91 05       	cpc	r25, r1
 2c6:	d1 f0       	breq	.+52     	; 0x2fc <DIO_u8SetPortDirection+0x5c>
 2c8:	2c 81       	ldd	r18, Y+4	; 0x04
 2ca:	3d 81       	ldd	r19, Y+5	; 0x05
 2cc:	22 30       	cpi	r18, 0x02	; 2
 2ce:	31 05       	cpc	r19, r1
 2d0:	2c f4       	brge	.+10     	; 0x2dc <DIO_u8SetPortDirection+0x3c>
 2d2:	8c 81       	ldd	r24, Y+4	; 0x04
 2d4:	9d 81       	ldd	r25, Y+5	; 0x05
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	61 f0       	breq	.+24     	; 0x2f2 <DIO_u8SetPortDirection+0x52>
 2da:	1f c0       	rjmp	.+62     	; 0x31a <DIO_u8SetPortDirection+0x7a>
 2dc:	2c 81       	ldd	r18, Y+4	; 0x04
 2de:	3d 81       	ldd	r19, Y+5	; 0x05
 2e0:	22 30       	cpi	r18, 0x02	; 2
 2e2:	31 05       	cpc	r19, r1
 2e4:	81 f0       	breq	.+32     	; 0x306 <DIO_u8SetPortDirection+0x66>
 2e6:	8c 81       	ldd	r24, Y+4	; 0x04
 2e8:	9d 81       	ldd	r25, Y+5	; 0x05
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	91 05       	cpc	r25, r1
 2ee:	81 f0       	breq	.+32     	; 0x310 <DIO_u8SetPortDirection+0x70>
 2f0:	14 c0       	rjmp	.+40     	; 0x31a <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA=Copy_u8Direction; break;
 2f2:	ea e3       	ldi	r30, 0x3A	; 58
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	8b 81       	ldd	r24, Y+3	; 0x03
 2f8:	80 83       	st	Z, r24
 2fa:	11 c0       	rjmp	.+34     	; 0x31e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB=Copy_u8Direction; break;
 2fc:	e7 e3       	ldi	r30, 0x37	; 55
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	8b 81       	ldd	r24, Y+3	; 0x03
 302:	80 83       	st	Z, r24
 304:	0c c0       	rjmp	.+24     	; 0x31e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC=Copy_u8Direction; break;
 306:	e4 e3       	ldi	r30, 0x34	; 52
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	8b 81       	ldd	r24, Y+3	; 0x03
 30c:	80 83       	st	Z, r24
 30e:	07 c0       	rjmp	.+14     	; 0x31e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD=Copy_u8Direction; break;
 310:	e1 e3       	ldi	r30, 0x31	; 49
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	8b 81       	ldd	r24, Y+3	; 0x03
 316:	80 83       	st	Z, r24
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1; break;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
 31e:	89 81       	ldd	r24, Y+1	; 0x01
}
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	cf 91       	pop	r28
 32c:	df 91       	pop	r29
 32e:	08 95       	ret

00000330 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
 330:	df 93       	push	r29
 332:	cf 93       	push	r28
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	28 97       	sbiw	r28, 0x08	; 8
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	f8 94       	cli
 33e:	de bf       	out	0x3e, r29	; 62
 340:	0f be       	out	0x3f, r0	; 63
 342:	cd bf       	out	0x3d, r28	; 61
 344:	8a 83       	std	Y+2, r24	; 0x02
 346:	6b 83       	std	Y+3, r22	; 0x03
 348:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 34a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
 34c:	8b 81       	ldd	r24, Y+3	; 0x03
 34e:	88 30       	cpi	r24, 0x08	; 8
 350:	08 f0       	brcs	.+2      	; 0x354 <DIO_u8SetPinValue+0x24>
 352:	f1 c0       	rjmp	.+482    	; 0x536 <DIO_u8SetPinValue+0x206>
	{
		if (Copy_u8Value==DIO_u8PIN_HIGH)
 354:	8c 81       	ldd	r24, Y+4	; 0x04
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	09 f0       	breq	.+2      	; 0x35c <DIO_u8SetPinValue+0x2c>
 35a:	72 c0       	rjmp	.+228    	; 0x440 <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
 35c:	8a 81       	ldd	r24, Y+2	; 0x02
 35e:	28 2f       	mov	r18, r24
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	38 87       	std	Y+8, r19	; 0x08
 364:	2f 83       	std	Y+7, r18	; 0x07
 366:	8f 81       	ldd	r24, Y+7	; 0x07
 368:	98 85       	ldd	r25, Y+8	; 0x08
 36a:	81 30       	cpi	r24, 0x01	; 1
 36c:	91 05       	cpc	r25, r1
 36e:	49 f1       	breq	.+82     	; 0x3c2 <DIO_u8SetPinValue+0x92>
 370:	2f 81       	ldd	r18, Y+7	; 0x07
 372:	38 85       	ldd	r19, Y+8	; 0x08
 374:	22 30       	cpi	r18, 0x02	; 2
 376:	31 05       	cpc	r19, r1
 378:	2c f4       	brge	.+10     	; 0x384 <DIO_u8SetPinValue+0x54>
 37a:	8f 81       	ldd	r24, Y+7	; 0x07
 37c:	98 85       	ldd	r25, Y+8	; 0x08
 37e:	00 97       	sbiw	r24, 0x00	; 0
 380:	61 f0       	breq	.+24     	; 0x39a <DIO_u8SetPinValue+0x6a>
 382:	5b c0       	rjmp	.+182    	; 0x43a <DIO_u8SetPinValue+0x10a>
 384:	2f 81       	ldd	r18, Y+7	; 0x07
 386:	38 85       	ldd	r19, Y+8	; 0x08
 388:	22 30       	cpi	r18, 0x02	; 2
 38a:	31 05       	cpc	r19, r1
 38c:	71 f1       	breq	.+92     	; 0x3ea <DIO_u8SetPinValue+0xba>
 38e:	8f 81       	ldd	r24, Y+7	; 0x07
 390:	98 85       	ldd	r25, Y+8	; 0x08
 392:	83 30       	cpi	r24, 0x03	; 3
 394:	91 05       	cpc	r25, r1
 396:	e9 f1       	breq	.+122    	; 0x412 <DIO_u8SetPinValue+0xe2>
 398:	50 c0       	rjmp	.+160    	; 0x43a <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(PORTA, Copy_u8Pin); break;
 39a:	ab e3       	ldi	r26, 0x3B	; 59
 39c:	b0 e0       	ldi	r27, 0x00	; 0
 39e:	eb e3       	ldi	r30, 0x3B	; 59
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	48 2f       	mov	r20, r24
 3a6:	8b 81       	ldd	r24, Y+3	; 0x03
 3a8:	28 2f       	mov	r18, r24
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 2e       	mov	r0, r18
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_u8SetPinValue+0x88>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	0a 94       	dec	r0
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_u8SetPinValue+0x84>
 3bc:	84 2b       	or	r24, r20
 3be:	8c 93       	st	X, r24
 3c0:	bc c0       	rjmp	.+376    	; 0x53a <DIO_u8SetPinValue+0x20a>
			case DIO_u8PORTB: SET_BIT(PORTB, Copy_u8Pin); break;
 3c2:	a8 e3       	ldi	r26, 0x38	; 56
 3c4:	b0 e0       	ldi	r27, 0x00	; 0
 3c6:	e8 e3       	ldi	r30, 0x38	; 56
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	48 2f       	mov	r20, r24
 3ce:	8b 81       	ldd	r24, Y+3	; 0x03
 3d0:	28 2f       	mov	r18, r24
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 2e       	mov	r0, r18
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_u8SetPinValue+0xb0>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	0a 94       	dec	r0
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_u8SetPinValue+0xac>
 3e4:	84 2b       	or	r24, r20
 3e6:	8c 93       	st	X, r24
 3e8:	a8 c0       	rjmp	.+336    	; 0x53a <DIO_u8SetPinValue+0x20a>
			case DIO_u8PORTC: SET_BIT(PORTC, Copy_u8Pin); break;
 3ea:	a5 e3       	ldi	r26, 0x35	; 53
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	e5 e3       	ldi	r30, 0x35	; 53
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	48 2f       	mov	r20, r24
 3f6:	8b 81       	ldd	r24, Y+3	; 0x03
 3f8:	28 2f       	mov	r18, r24
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 2e       	mov	r0, r18
 402:	02 c0       	rjmp	.+4      	; 0x408 <DIO_u8SetPinValue+0xd8>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	0a 94       	dec	r0
 40a:	e2 f7       	brpl	.-8      	; 0x404 <DIO_u8SetPinValue+0xd4>
 40c:	84 2b       	or	r24, r20
 40e:	8c 93       	st	X, r24
 410:	94 c0       	rjmp	.+296    	; 0x53a <DIO_u8SetPinValue+0x20a>
			case DIO_u8PORTD: SET_BIT(PORTD, Copy_u8Pin); break;
 412:	a2 e3       	ldi	r26, 0x32	; 50
 414:	b0 e0       	ldi	r27, 0x00	; 0
 416:	e2 e3       	ldi	r30, 0x32	; 50
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	48 2f       	mov	r20, r24
 41e:	8b 81       	ldd	r24, Y+3	; 0x03
 420:	28 2f       	mov	r18, r24
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 2e       	mov	r0, r18
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_u8SetPinValue+0x100>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	0a 94       	dec	r0
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_u8SetPinValue+0xfc>
 434:	84 2b       	or	r24, r20
 436:	8c 93       	st	X, r24
 438:	80 c0       	rjmp	.+256    	; 0x53a <DIO_u8SetPinValue+0x20a>
			default: Local_u8ErrorState=1; break;
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	89 83       	std	Y+1, r24	; 0x01
 43e:	7d c0       	rjmp	.+250    	; 0x53a <DIO_u8SetPinValue+0x20a>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_LOW)
 440:	8c 81       	ldd	r24, Y+4	; 0x04
 442:	88 23       	and	r24, r24
 444:	09 f0       	breq	.+2      	; 0x448 <DIO_u8SetPinValue+0x118>
 446:	79 c0       	rjmp	.+242    	; 0x53a <DIO_u8SetPinValue+0x20a>
		{
			switch(Copy_u8Port)
 448:	8a 81       	ldd	r24, Y+2	; 0x02
 44a:	28 2f       	mov	r18, r24
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	3e 83       	std	Y+6, r19	; 0x06
 450:	2d 83       	std	Y+5, r18	; 0x05
 452:	8d 81       	ldd	r24, Y+5	; 0x05
 454:	9e 81       	ldd	r25, Y+6	; 0x06
 456:	81 30       	cpi	r24, 0x01	; 1
 458:	91 05       	cpc	r25, r1
 45a:	59 f1       	breq	.+86     	; 0x4b2 <DIO_u8SetPinValue+0x182>
 45c:	2d 81       	ldd	r18, Y+5	; 0x05
 45e:	3e 81       	ldd	r19, Y+6	; 0x06
 460:	22 30       	cpi	r18, 0x02	; 2
 462:	31 05       	cpc	r19, r1
 464:	2c f4       	brge	.+10     	; 0x470 <DIO_u8SetPinValue+0x140>
 466:	8d 81       	ldd	r24, Y+5	; 0x05
 468:	9e 81       	ldd	r25, Y+6	; 0x06
 46a:	00 97       	sbiw	r24, 0x00	; 0
 46c:	69 f0       	breq	.+26     	; 0x488 <DIO_u8SetPinValue+0x158>
 46e:	60 c0       	rjmp	.+192    	; 0x530 <DIO_u8SetPinValue+0x200>
 470:	2d 81       	ldd	r18, Y+5	; 0x05
 472:	3e 81       	ldd	r19, Y+6	; 0x06
 474:	22 30       	cpi	r18, 0x02	; 2
 476:	31 05       	cpc	r19, r1
 478:	89 f1       	breq	.+98     	; 0x4dc <DIO_u8SetPinValue+0x1ac>
 47a:	8d 81       	ldd	r24, Y+5	; 0x05
 47c:	9e 81       	ldd	r25, Y+6	; 0x06
 47e:	83 30       	cpi	r24, 0x03	; 3
 480:	91 05       	cpc	r25, r1
 482:	09 f4       	brne	.+2      	; 0x486 <DIO_u8SetPinValue+0x156>
 484:	40 c0       	rjmp	.+128    	; 0x506 <DIO_u8SetPinValue+0x1d6>
 486:	54 c0       	rjmp	.+168    	; 0x530 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA, Copy_u8Pin); break;
 488:	ab e3       	ldi	r26, 0x3B	; 59
 48a:	b0 e0       	ldi	r27, 0x00	; 0
 48c:	eb e3       	ldi	r30, 0x3B	; 59
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	48 2f       	mov	r20, r24
 494:	8b 81       	ldd	r24, Y+3	; 0x03
 496:	28 2f       	mov	r18, r24
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 2e       	mov	r0, r18
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <DIO_u8SetPinValue+0x176>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	0a 94       	dec	r0
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <DIO_u8SetPinValue+0x172>
 4aa:	80 95       	com	r24
 4ac:	84 23       	and	r24, r20
 4ae:	8c 93       	st	X, r24
 4b0:	44 c0       	rjmp	.+136    	; 0x53a <DIO_u8SetPinValue+0x20a>
			case DIO_u8PORTB: CLR_BIT(PORTB, Copy_u8Pin); break;
 4b2:	a8 e3       	ldi	r26, 0x38	; 56
 4b4:	b0 e0       	ldi	r27, 0x00	; 0
 4b6:	e8 e3       	ldi	r30, 0x38	; 56
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	48 2f       	mov	r20, r24
 4be:	8b 81       	ldd	r24, Y+3	; 0x03
 4c0:	28 2f       	mov	r18, r24
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 2e       	mov	r0, r18
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_u8SetPinValue+0x1a0>
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	0a 94       	dec	r0
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_u8SetPinValue+0x19c>
 4d4:	80 95       	com	r24
 4d6:	84 23       	and	r24, r20
 4d8:	8c 93       	st	X, r24
 4da:	2f c0       	rjmp	.+94     	; 0x53a <DIO_u8SetPinValue+0x20a>
			case DIO_u8PORTC: CLR_BIT(PORTC, Copy_u8Pin); break;
 4dc:	a5 e3       	ldi	r26, 0x35	; 53
 4de:	b0 e0       	ldi	r27, 0x00	; 0
 4e0:	e5 e3       	ldi	r30, 0x35	; 53
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	48 2f       	mov	r20, r24
 4e8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ea:	28 2f       	mov	r18, r24
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	02 2e       	mov	r0, r18
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DIO_u8SetPinValue+0x1ca>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	0a 94       	dec	r0
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <DIO_u8SetPinValue+0x1c6>
 4fe:	80 95       	com	r24
 500:	84 23       	and	r24, r20
 502:	8c 93       	st	X, r24
 504:	1a c0       	rjmp	.+52     	; 0x53a <DIO_u8SetPinValue+0x20a>
			case DIO_u8PORTD: CLR_BIT(PORTD, Copy_u8Pin); break;
 506:	a2 e3       	ldi	r26, 0x32	; 50
 508:	b0 e0       	ldi	r27, 0x00	; 0
 50a:	e2 e3       	ldi	r30, 0x32	; 50
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	48 2f       	mov	r20, r24
 512:	8b 81       	ldd	r24, Y+3	; 0x03
 514:	28 2f       	mov	r18, r24
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	02 2e       	mov	r0, r18
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_u8SetPinValue+0x1f4>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	0a 94       	dec	r0
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_u8SetPinValue+0x1f0>
 528:	80 95       	com	r24
 52a:	84 23       	and	r24, r20
 52c:	8c 93       	st	X, r24
 52e:	05 c0       	rjmp	.+10     	; 0x53a <DIO_u8SetPinValue+0x20a>
			default: Local_u8ErrorState=1; break;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	89 83       	std	Y+1, r24	; 0x01
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_u8SetPinValue+0x20a>
			}
		}
	}
	else
	{
		Local_u8ErrorState=1;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 53a:	89 81       	ldd	r24, Y+1	; 0x01
}
 53c:	28 96       	adiw	r28, 0x08	; 8
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	f8 94       	cli
 542:	de bf       	out	0x3e, r29	; 62
 544:	0f be       	out	0x3f, r0	; 63
 546:	cd bf       	out	0x3d, r28	; 61
 548:	cf 91       	pop	r28
 54a:	df 91       	pop	r29
 54c:	08 95       	ret

0000054e <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
 54e:	df 93       	push	r29
 550:	cf 93       	push	r28
 552:	00 d0       	rcall	.+0      	; 0x554 <DIO_u8SetPortValue+0x6>
 554:	00 d0       	rcall	.+0      	; 0x556 <DIO_u8SetPortValue+0x8>
 556:	0f 92       	push	r0
 558:	cd b7       	in	r28, 0x3d	; 61
 55a:	de b7       	in	r29, 0x3e	; 62
 55c:	8a 83       	std	Y+2, r24	; 0x02
 55e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 560:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
 562:	8a 81       	ldd	r24, Y+2	; 0x02
 564:	28 2f       	mov	r18, r24
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	3d 83       	std	Y+5, r19	; 0x05
 56a:	2c 83       	std	Y+4, r18	; 0x04
 56c:	8c 81       	ldd	r24, Y+4	; 0x04
 56e:	9d 81       	ldd	r25, Y+5	; 0x05
 570:	81 30       	cpi	r24, 0x01	; 1
 572:	91 05       	cpc	r25, r1
 574:	d1 f0       	breq	.+52     	; 0x5aa <DIO_u8SetPortValue+0x5c>
 576:	2c 81       	ldd	r18, Y+4	; 0x04
 578:	3d 81       	ldd	r19, Y+5	; 0x05
 57a:	22 30       	cpi	r18, 0x02	; 2
 57c:	31 05       	cpc	r19, r1
 57e:	2c f4       	brge	.+10     	; 0x58a <DIO_u8SetPortValue+0x3c>
 580:	8c 81       	ldd	r24, Y+4	; 0x04
 582:	9d 81       	ldd	r25, Y+5	; 0x05
 584:	00 97       	sbiw	r24, 0x00	; 0
 586:	61 f0       	breq	.+24     	; 0x5a0 <DIO_u8SetPortValue+0x52>
 588:	1f c0       	rjmp	.+62     	; 0x5c8 <DIO_u8SetPortValue+0x7a>
 58a:	2c 81       	ldd	r18, Y+4	; 0x04
 58c:	3d 81       	ldd	r19, Y+5	; 0x05
 58e:	22 30       	cpi	r18, 0x02	; 2
 590:	31 05       	cpc	r19, r1
 592:	81 f0       	breq	.+32     	; 0x5b4 <DIO_u8SetPortValue+0x66>
 594:	8c 81       	ldd	r24, Y+4	; 0x04
 596:	9d 81       	ldd	r25, Y+5	; 0x05
 598:	83 30       	cpi	r24, 0x03	; 3
 59a:	91 05       	cpc	r25, r1
 59c:	81 f0       	breq	.+32     	; 0x5be <DIO_u8SetPortValue+0x70>
 59e:	14 c0       	rjmp	.+40     	; 0x5c8 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 5a0:	eb e3       	ldi	r30, 0x3B	; 59
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	8b 81       	ldd	r24, Y+3	; 0x03
 5a6:	80 83       	st	Z, r24
 5a8:	11 c0       	rjmp	.+34     	; 0x5cc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 5aa:	e8 e3       	ldi	r30, 0x38	; 56
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	8b 81       	ldd	r24, Y+3	; 0x03
 5b0:	80 83       	st	Z, r24
 5b2:	0c c0       	rjmp	.+24     	; 0x5cc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 5b4:	e5 e3       	ldi	r30, 0x35	; 53
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ba:	80 83       	st	Z, r24
 5bc:	07 c0       	rjmp	.+14     	; 0x5cc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 5be:	e2 e3       	ldi	r30, 0x32	; 50
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	8b 81       	ldd	r24, Y+3	; 0x03
 5c4:	80 83       	st	Z, r24
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1; break;
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 5cc:	89 81       	ldd	r24, Y+1	; 0x01
}
 5ce:	0f 90       	pop	r0
 5d0:	0f 90       	pop	r0
 5d2:	0f 90       	pop	r0
 5d4:	0f 90       	pop	r0
 5d6:	0f 90       	pop	r0
 5d8:	cf 91       	pop	r28
 5da:	df 91       	pop	r29
 5dc:	08 95       	ret

000005de <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
 5de:	df 93       	push	r29
 5e0:	cf 93       	push	r28
 5e2:	cd b7       	in	r28, 0x3d	; 61
 5e4:	de b7       	in	r29, 0x3e	; 62
 5e6:	27 97       	sbiw	r28, 0x07	; 7
 5e8:	0f b6       	in	r0, 0x3f	; 63
 5ea:	f8 94       	cli
 5ec:	de bf       	out	0x3e, r29	; 62
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	cd bf       	out	0x3d, r28	; 61
 5f2:	8a 83       	std	Y+2, r24	; 0x02
 5f4:	6b 83       	std	Y+3, r22	; 0x03
 5f6:	5d 83       	std	Y+5, r21	; 0x05
 5f8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 5fa:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_pu8Value!=NULL) && (Copy_u8Pin<= DIO_u8PIN7))
 5fc:	8c 81       	ldd	r24, Y+4	; 0x04
 5fe:	9d 81       	ldd	r25, Y+5	; 0x05
 600:	00 97       	sbiw	r24, 0x00	; 0
 602:	09 f4       	brne	.+2      	; 0x606 <DIO_u8GetPinValue+0x28>
 604:	78 c0       	rjmp	.+240    	; 0x6f6 <DIO_u8GetPinValue+0x118>
 606:	8b 81       	ldd	r24, Y+3	; 0x03
 608:	88 30       	cpi	r24, 0x08	; 8
 60a:	08 f0       	brcs	.+2      	; 0x60e <DIO_u8GetPinValue+0x30>
 60c:	74 c0       	rjmp	.+232    	; 0x6f6 <DIO_u8GetPinValue+0x118>
	{
		switch (Copy_u8Port)
 60e:	8a 81       	ldd	r24, Y+2	; 0x02
 610:	28 2f       	mov	r18, r24
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	3f 83       	std	Y+7, r19	; 0x07
 616:	2e 83       	std	Y+6, r18	; 0x06
 618:	4e 81       	ldd	r20, Y+6	; 0x06
 61a:	5f 81       	ldd	r21, Y+7	; 0x07
 61c:	41 30       	cpi	r20, 0x01	; 1
 61e:	51 05       	cpc	r21, r1
 620:	59 f1       	breq	.+86     	; 0x678 <DIO_u8GetPinValue+0x9a>
 622:	8e 81       	ldd	r24, Y+6	; 0x06
 624:	9f 81       	ldd	r25, Y+7	; 0x07
 626:	82 30       	cpi	r24, 0x02	; 2
 628:	91 05       	cpc	r25, r1
 62a:	34 f4       	brge	.+12     	; 0x638 <DIO_u8GetPinValue+0x5a>
 62c:	2e 81       	ldd	r18, Y+6	; 0x06
 62e:	3f 81       	ldd	r19, Y+7	; 0x07
 630:	21 15       	cp	r18, r1
 632:	31 05       	cpc	r19, r1
 634:	69 f0       	breq	.+26     	; 0x650 <DIO_u8GetPinValue+0x72>
 636:	5c c0       	rjmp	.+184    	; 0x6f0 <DIO_u8GetPinValue+0x112>
 638:	4e 81       	ldd	r20, Y+6	; 0x06
 63a:	5f 81       	ldd	r21, Y+7	; 0x07
 63c:	42 30       	cpi	r20, 0x02	; 2
 63e:	51 05       	cpc	r21, r1
 640:	79 f1       	breq	.+94     	; 0x6a0 <DIO_u8GetPinValue+0xc2>
 642:	8e 81       	ldd	r24, Y+6	; 0x06
 644:	9f 81       	ldd	r25, Y+7	; 0x07
 646:	83 30       	cpi	r24, 0x03	; 3
 648:	91 05       	cpc	r25, r1
 64a:	09 f4       	brne	.+2      	; 0x64e <DIO_u8GetPinValue+0x70>
 64c:	3d c0       	rjmp	.+122    	; 0x6c8 <DIO_u8GetPinValue+0xea>
 64e:	50 c0       	rjmp	.+160    	; 0x6f0 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 650:	e9 e3       	ldi	r30, 0x39	; 57
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	80 81       	ld	r24, Z
 656:	28 2f       	mov	r18, r24
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	8b 81       	ldd	r24, Y+3	; 0x03
 65c:	88 2f       	mov	r24, r24
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	a9 01       	movw	r20, r18
 662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_u8GetPinValue+0x8a>
 664:	55 95       	asr	r21
 666:	47 95       	ror	r20
 668:	8a 95       	dec	r24
 66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_u8GetPinValue+0x86>
 66c:	ca 01       	movw	r24, r20
 66e:	81 70       	andi	r24, 0x01	; 1
 670:	ec 81       	ldd	r30, Y+4	; 0x04
 672:	fd 81       	ldd	r31, Y+5	; 0x05
 674:	80 83       	st	Z, r24
 676:	41 c0       	rjmp	.+130    	; 0x6fa <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 678:	e6 e3       	ldi	r30, 0x36	; 54
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 81       	ld	r24, Z
 67e:	28 2f       	mov	r18, r24
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	8b 81       	ldd	r24, Y+3	; 0x03
 684:	88 2f       	mov	r24, r24
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	a9 01       	movw	r20, r18
 68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_u8GetPinValue+0xb2>
 68c:	55 95       	asr	r21
 68e:	47 95       	ror	r20
 690:	8a 95       	dec	r24
 692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_u8GetPinValue+0xae>
 694:	ca 01       	movw	r24, r20
 696:	81 70       	andi	r24, 0x01	; 1
 698:	ec 81       	ldd	r30, Y+4	; 0x04
 69a:	fd 81       	ldd	r31, Y+5	; 0x05
 69c:	80 83       	st	Z, r24
 69e:	2d c0       	rjmp	.+90     	; 0x6fa <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 6a0:	e3 e3       	ldi	r30, 0x33	; 51
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	28 2f       	mov	r18, r24
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	8b 81       	ldd	r24, Y+3	; 0x03
 6ac:	88 2f       	mov	r24, r24
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	a9 01       	movw	r20, r18
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <DIO_u8GetPinValue+0xda>
 6b4:	55 95       	asr	r21
 6b6:	47 95       	ror	r20
 6b8:	8a 95       	dec	r24
 6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <DIO_u8GetPinValue+0xd6>
 6bc:	ca 01       	movw	r24, r20
 6be:	81 70       	andi	r24, 0x01	; 1
 6c0:	ec 81       	ldd	r30, Y+4	; 0x04
 6c2:	fd 81       	ldd	r31, Y+5	; 0x05
 6c4:	80 83       	st	Z, r24
 6c6:	19 c0       	rjmp	.+50     	; 0x6fa <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 6c8:	e0 e3       	ldi	r30, 0x30	; 48
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	80 81       	ld	r24, Z
 6ce:	28 2f       	mov	r18, r24
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	8b 81       	ldd	r24, Y+3	; 0x03
 6d4:	88 2f       	mov	r24, r24
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	a9 01       	movw	r20, r18
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <DIO_u8GetPinValue+0x102>
 6dc:	55 95       	asr	r21
 6de:	47 95       	ror	r20
 6e0:	8a 95       	dec	r24
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <DIO_u8GetPinValue+0xfe>
 6e4:	ca 01       	movw	r24, r20
 6e6:	81 70       	andi	r24, 0x01	; 1
 6e8:	ec 81       	ldd	r30, Y+4	; 0x04
 6ea:	fd 81       	ldd	r31, Y+5	; 0x05
 6ec:	80 83       	st	Z, r24
 6ee:	05 c0       	rjmp	.+10     	; 0x6fa <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState=1; break;
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	89 83       	std	Y+1, r24	; 0x01
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <DIO_u8GetPinValue+0x11c>
			}

	}
	else
	{
		Local_u8ErrorState=1;
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 6fa:	89 81       	ldd	r24, Y+1	; 0x01
}
 6fc:	27 96       	adiw	r28, 0x07	; 7
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	f8 94       	cli
 702:	de bf       	out	0x3e, r29	; 62
 704:	0f be       	out	0x3f, r0	; 63
 706:	cd bf       	out	0x3d, r28	; 61
 708:	cf 91       	pop	r28
 70a:	df 91       	pop	r29
 70c:	08 95       	ret

0000070e <EXTI_voidInt0Init>:
void (*EXTI_pvInt1Func)(void)=NULL;

void (*EXTI_pvInt2Func)(void)=NULL;

void EXTI_voidInt0Init(u8 Copy_u8SenseControl)
{
 70e:	df 93       	push	r29
 710:	cf 93       	push	r28
 712:	00 d0       	rcall	.+0      	; 0x714 <EXTI_voidInt0Init+0x6>
 714:	0f 92       	push	r0
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
 71a:	89 83       	std	Y+1, r24	; 0x01
	/*set sense control for INT0*/
	switch (Copy_u8SenseControl)
 71c:	89 81       	ldd	r24, Y+1	; 0x01
 71e:	28 2f       	mov	r18, r24
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	3b 83       	std	Y+3, r19	; 0x03
 724:	2a 83       	std	Y+2, r18	; 0x02
 726:	8a 81       	ldd	r24, Y+2	; 0x02
 728:	9b 81       	ldd	r25, Y+3	; 0x03
 72a:	81 30       	cpi	r24, 0x01	; 1
 72c:	91 05       	cpc	r25, r1
 72e:	21 f1       	breq	.+72     	; 0x778 <EXTI_voidInt0Init+0x6a>
 730:	2a 81       	ldd	r18, Y+2	; 0x02
 732:	3b 81       	ldd	r19, Y+3	; 0x03
 734:	22 30       	cpi	r18, 0x02	; 2
 736:	31 05       	cpc	r19, r1
 738:	2c f4       	brge	.+10     	; 0x744 <EXTI_voidInt0Init+0x36>
 73a:	8a 81       	ldd	r24, Y+2	; 0x02
 73c:	9b 81       	ldd	r25, Y+3	; 0x03
 73e:	00 97       	sbiw	r24, 0x00	; 0
 740:	61 f0       	breq	.+24     	; 0x75a <EXTI_voidInt0Init+0x4c>
 742:	46 c0       	rjmp	.+140    	; 0x7d0 <EXTI_voidInt0Init+0xc2>
 744:	2a 81       	ldd	r18, Y+2	; 0x02
 746:	3b 81       	ldd	r19, Y+3	; 0x03
 748:	22 30       	cpi	r18, 0x02	; 2
 74a:	31 05       	cpc	r19, r1
 74c:	21 f1       	breq	.+72     	; 0x796 <EXTI_voidInt0Init+0x88>
 74e:	8a 81       	ldd	r24, Y+2	; 0x02
 750:	9b 81       	ldd	r25, Y+3	; 0x03
 752:	83 30       	cpi	r24, 0x03	; 3
 754:	91 05       	cpc	r25, r1
 756:	71 f1       	breq	.+92     	; 0x7b4 <EXTI_voidInt0Init+0xa6>
 758:	3b c0       	rjmp	.+118    	; 0x7d0 <EXTI_voidInt0Init+0xc2>
	{
	case (Sense_LowLevel): /*for low level :ISC01=0,ISC00=0*/
				CLR_BIT(MCUCR,MCUCR_ISC01);
 75a:	a5 e5       	ldi	r26, 0x55	; 85
 75c:	b0 e0       	ldi	r27, 0x00	; 0
 75e:	e5 e5       	ldi	r30, 0x55	; 85
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	80 81       	ld	r24, Z
 764:	8d 7f       	andi	r24, 0xFD	; 253
 766:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC00);
 768:	a5 e5       	ldi	r26, 0x55	; 85
 76a:	b0 e0       	ldi	r27, 0x00	; 0
 76c:	e5 e5       	ldi	r30, 0x55	; 85
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	80 81       	ld	r24, Z
 772:	8e 7f       	andi	r24, 0xFE	; 254
 774:	8c 93       	st	X, r24
 776:	2c c0       	rjmp	.+88     	; 0x7d0 <EXTI_voidInt0Init+0xc2>
	break;
	case (Sense_OnChange): /*for on change :ISC01=0,ISC00=1*/
				CLR_BIT(MCUCR,MCUCR_ISC01);
 778:	a5 e5       	ldi	r26, 0x55	; 85
 77a:	b0 e0       	ldi	r27, 0x00	; 0
 77c:	e5 e5       	ldi	r30, 0x55	; 85
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	80 81       	ld	r24, Z
 782:	8d 7f       	andi	r24, 0xFD	; 253
 784:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC00);
 786:	a5 e5       	ldi	r26, 0x55	; 85
 788:	b0 e0       	ldi	r27, 0x00	; 0
 78a:	e5 e5       	ldi	r30, 0x55	; 85
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	80 81       	ld	r24, Z
 790:	81 60       	ori	r24, 0x01	; 1
 792:	8c 93       	st	X, r24
 794:	1d c0       	rjmp	.+58     	; 0x7d0 <EXTI_voidInt0Init+0xc2>
	break;
	case (Sense_FallingEdge): /*for falling edge :ISC01=1,ISC00=0*/
				SET_BIT(MCUCR,MCUCR_ISC01);
 796:	a5 e5       	ldi	r26, 0x55	; 85
 798:	b0 e0       	ldi	r27, 0x00	; 0
 79a:	e5 e5       	ldi	r30, 0x55	; 85
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	80 81       	ld	r24, Z
 7a0:	82 60       	ori	r24, 0x02	; 2
 7a2:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC00);
 7a4:	a5 e5       	ldi	r26, 0x55	; 85
 7a6:	b0 e0       	ldi	r27, 0x00	; 0
 7a8:	e5 e5       	ldi	r30, 0x55	; 85
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	80 81       	ld	r24, Z
 7ae:	8e 7f       	andi	r24, 0xFE	; 254
 7b0:	8c 93       	st	X, r24
 7b2:	0e c0       	rjmp	.+28     	; 0x7d0 <EXTI_voidInt0Init+0xc2>
	break;
	case (Sense_RisingEdge): /*for rising edge :ISC01=1,ISC00=1*/
				SET_BIT(MCUCR,MCUCR_ISC01);
 7b4:	a5 e5       	ldi	r26, 0x55	; 85
 7b6:	b0 e0       	ldi	r27, 0x00	; 0
 7b8:	e5 e5       	ldi	r30, 0x55	; 85
 7ba:	f0 e0       	ldi	r31, 0x00	; 0
 7bc:	80 81       	ld	r24, Z
 7be:	82 60       	ori	r24, 0x02	; 2
 7c0:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC00);
 7c2:	a5 e5       	ldi	r26, 0x55	; 85
 7c4:	b0 e0       	ldi	r27, 0x00	; 0
 7c6:	e5 e5       	ldi	r30, 0x55	; 85
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	80 81       	ld	r24, Z
 7cc:	81 60       	ori	r24, 0x01	; 1
 7ce:	8c 93       	st	X, r24
	break;
	}
	/*peripheral (specific) interrupt enable*/
	SET_BIT(GICR,GICR_INT0);
 7d0:	ab e5       	ldi	r26, 0x5B	; 91
 7d2:	b0 e0       	ldi	r27, 0x00	; 0
 7d4:	eb e5       	ldi	r30, 0x5B	; 91
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	80 81       	ld	r24, Z
 7da:	80 64       	ori	r24, 0x40	; 64
 7dc:	8c 93       	st	X, r24
}
 7de:	0f 90       	pop	r0
 7e0:	0f 90       	pop	r0
 7e2:	0f 90       	pop	r0
 7e4:	cf 91       	pop	r28
 7e6:	df 91       	pop	r29
 7e8:	08 95       	ret

000007ea <EXTI_voidInt1Init>:

void EXTI_voidInt1Init(u8 Copy_u8SenseControl)
{
 7ea:	df 93       	push	r29
 7ec:	cf 93       	push	r28
 7ee:	00 d0       	rcall	.+0      	; 0x7f0 <EXTI_voidInt1Init+0x6>
 7f0:	0f 92       	push	r0
 7f2:	cd b7       	in	r28, 0x3d	; 61
 7f4:	de b7       	in	r29, 0x3e	; 62
 7f6:	89 83       	std	Y+1, r24	; 0x01
	/*set sense control for INT1*/
	switch (Copy_u8SenseControl)
 7f8:	89 81       	ldd	r24, Y+1	; 0x01
 7fa:	28 2f       	mov	r18, r24
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	3b 83       	std	Y+3, r19	; 0x03
 800:	2a 83       	std	Y+2, r18	; 0x02
 802:	8a 81       	ldd	r24, Y+2	; 0x02
 804:	9b 81       	ldd	r25, Y+3	; 0x03
 806:	81 30       	cpi	r24, 0x01	; 1
 808:	91 05       	cpc	r25, r1
 80a:	21 f1       	breq	.+72     	; 0x854 <EXTI_voidInt1Init+0x6a>
 80c:	2a 81       	ldd	r18, Y+2	; 0x02
 80e:	3b 81       	ldd	r19, Y+3	; 0x03
 810:	22 30       	cpi	r18, 0x02	; 2
 812:	31 05       	cpc	r19, r1
 814:	2c f4       	brge	.+10     	; 0x820 <EXTI_voidInt1Init+0x36>
 816:	8a 81       	ldd	r24, Y+2	; 0x02
 818:	9b 81       	ldd	r25, Y+3	; 0x03
 81a:	00 97       	sbiw	r24, 0x00	; 0
 81c:	61 f0       	breq	.+24     	; 0x836 <EXTI_voidInt1Init+0x4c>
 81e:	46 c0       	rjmp	.+140    	; 0x8ac <__stack+0x4d>
 820:	2a 81       	ldd	r18, Y+2	; 0x02
 822:	3b 81       	ldd	r19, Y+3	; 0x03
 824:	22 30       	cpi	r18, 0x02	; 2
 826:	31 05       	cpc	r19, r1
 828:	21 f1       	breq	.+72     	; 0x872 <__stack+0x13>
 82a:	8a 81       	ldd	r24, Y+2	; 0x02
 82c:	9b 81       	ldd	r25, Y+3	; 0x03
 82e:	83 30       	cpi	r24, 0x03	; 3
 830:	91 05       	cpc	r25, r1
 832:	71 f1       	breq	.+92     	; 0x890 <__stack+0x31>
 834:	3b c0       	rjmp	.+118    	; 0x8ac <__stack+0x4d>
	{
	case (Sense_LowLevel): /*for low level :ISC11=0,ISC10=0*/
				CLR_BIT(MCUCR,MCUCR_ISC11);
 836:	a5 e5       	ldi	r26, 0x55	; 85
 838:	b0 e0       	ldi	r27, 0x00	; 0
 83a:	e5 e5       	ldi	r30, 0x55	; 85
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	80 81       	ld	r24, Z
 840:	87 7f       	andi	r24, 0xF7	; 247
 842:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC10);
 844:	a5 e5       	ldi	r26, 0x55	; 85
 846:	b0 e0       	ldi	r27, 0x00	; 0
 848:	e5 e5       	ldi	r30, 0x55	; 85
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	80 81       	ld	r24, Z
 84e:	8b 7f       	andi	r24, 0xFB	; 251
 850:	8c 93       	st	X, r24
 852:	2c c0       	rjmp	.+88     	; 0x8ac <__stack+0x4d>
	break;
	case (Sense_OnChange): /*for on change :ISC11=0,ISC10=1*/
				CLR_BIT(MCUCR,MCUCR_ISC11);
 854:	a5 e5       	ldi	r26, 0x55	; 85
 856:	b0 e0       	ldi	r27, 0x00	; 0
 858:	e5 e5       	ldi	r30, 0x55	; 85
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	80 81       	ld	r24, Z
 85e:	87 7f       	andi	r24, 0xF7	; 247
 860:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC10);
 862:	a5 e5       	ldi	r26, 0x55	; 85
 864:	b0 e0       	ldi	r27, 0x00	; 0
 866:	e5 e5       	ldi	r30, 0x55	; 85
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	80 81       	ld	r24, Z
 86c:	84 60       	ori	r24, 0x04	; 4
 86e:	8c 93       	st	X, r24
 870:	1d c0       	rjmp	.+58     	; 0x8ac <__stack+0x4d>
	break;
	case (Sense_FallingEdge): /*for falling edge :ISC11=1,ISC10=0*/
				SET_BIT(MCUCR,MCUCR_ISC11);
 872:	a5 e5       	ldi	r26, 0x55	; 85
 874:	b0 e0       	ldi	r27, 0x00	; 0
 876:	e5 e5       	ldi	r30, 0x55	; 85
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	80 81       	ld	r24, Z
 87c:	88 60       	ori	r24, 0x08	; 8
 87e:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,MCUCR_ISC10);
 880:	a5 e5       	ldi	r26, 0x55	; 85
 882:	b0 e0       	ldi	r27, 0x00	; 0
 884:	e5 e5       	ldi	r30, 0x55	; 85
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	80 81       	ld	r24, Z
 88a:	8b 7f       	andi	r24, 0xFB	; 251
 88c:	8c 93       	st	X, r24
 88e:	0e c0       	rjmp	.+28     	; 0x8ac <__stack+0x4d>
	break;
	case (Sense_RisingEdge): /*for rising edge :ISC11=1,ISC10=1*/
				SET_BIT(MCUCR,MCUCR_ISC11);
 890:	a5 e5       	ldi	r26, 0x55	; 85
 892:	b0 e0       	ldi	r27, 0x00	; 0
 894:	e5 e5       	ldi	r30, 0x55	; 85
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	80 81       	ld	r24, Z
 89a:	88 60       	ori	r24, 0x08	; 8
 89c:	8c 93       	st	X, r24
				SET_BIT(MCUCR,MCUCR_ISC10);
 89e:	a5 e5       	ldi	r26, 0x55	; 85
 8a0:	b0 e0       	ldi	r27, 0x00	; 0
 8a2:	e5 e5       	ldi	r30, 0x55	; 85
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	80 81       	ld	r24, Z
 8a8:	84 60       	ori	r24, 0x04	; 4
 8aa:	8c 93       	st	X, r24
	break;
	}
	/*peripheral (specific) interrupt enable*/
	SET_BIT(GICR,GICR_INT1);
 8ac:	ab e5       	ldi	r26, 0x5B	; 91
 8ae:	b0 e0       	ldi	r27, 0x00	; 0
 8b0:	eb e5       	ldi	r30, 0x5B	; 91
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	80 81       	ld	r24, Z
 8b6:	80 68       	ori	r24, 0x80	; 128
 8b8:	8c 93       	st	X, r24
}
 8ba:	0f 90       	pop	r0
 8bc:	0f 90       	pop	r0
 8be:	0f 90       	pop	r0
 8c0:	cf 91       	pop	r28
 8c2:	df 91       	pop	r29
 8c4:	08 95       	ret

000008c6 <EXTI_voidInt2Init>:

void EXTI_voidInt2Init(u8 Copy_u8SenseControl)
{
 8c6:	df 93       	push	r29
 8c8:	cf 93       	push	r28
 8ca:	00 d0       	rcall	.+0      	; 0x8cc <EXTI_voidInt2Init+0x6>
 8cc:	0f 92       	push	r0
 8ce:	cd b7       	in	r28, 0x3d	; 61
 8d0:	de b7       	in	r29, 0x3e	; 62
 8d2:	89 83       	std	Y+1, r24	; 0x01
	/*set sense control for INT2*/
	switch(Copy_u8SenseControl)
 8d4:	89 81       	ldd	r24, Y+1	; 0x01
 8d6:	28 2f       	mov	r18, r24
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	3b 83       	std	Y+3, r19	; 0x03
 8dc:	2a 83       	std	Y+2, r18	; 0x02
 8de:	8a 81       	ldd	r24, Y+2	; 0x02
 8e0:	9b 81       	ldd	r25, Y+3	; 0x03
 8e2:	82 30       	cpi	r24, 0x02	; 2
 8e4:	91 05       	cpc	r25, r1
 8e6:	31 f0       	breq	.+12     	; 0x8f4 <EXTI_voidInt2Init+0x2e>
 8e8:	2a 81       	ldd	r18, Y+2	; 0x02
 8ea:	3b 81       	ldd	r19, Y+3	; 0x03
 8ec:	23 30       	cpi	r18, 0x03	; 3
 8ee:	31 05       	cpc	r19, r1
 8f0:	49 f0       	breq	.+18     	; 0x904 <EXTI_voidInt2Init+0x3e>
 8f2:	0f c0       	rjmp	.+30     	; 0x912 <EXTI_voidInt2Init+0x4c>
	{
	case (Sense_FallingEdge):
				CLR_BIT(MCUCSR,MCUCSR_ISC2);
 8f4:	a4 e5       	ldi	r26, 0x54	; 84
 8f6:	b0 e0       	ldi	r27, 0x00	; 0
 8f8:	e4 e5       	ldi	r30, 0x54	; 84
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	80 81       	ld	r24, Z
 8fe:	8f 7b       	andi	r24, 0xBF	; 191
 900:	8c 93       	st	X, r24
 902:	07 c0       	rjmp	.+14     	; 0x912 <EXTI_voidInt2Init+0x4c>
	break;
	case (Sense_RisingEdge):
				SET_BIT(MCUCSR,MCUCSR_ISC2);
 904:	a4 e5       	ldi	r26, 0x54	; 84
 906:	b0 e0       	ldi	r27, 0x00	; 0
 908:	e4 e5       	ldi	r30, 0x54	; 84
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	80 81       	ld	r24, Z
 90e:	80 64       	ori	r24, 0x40	; 64
 910:	8c 93       	st	X, r24
	break;
	}
	/*peripheral (specific) interrupt enable*/
	SET_BIT(GICR,GICR_INT2);
 912:	ab e5       	ldi	r26, 0x5B	; 91
 914:	b0 e0       	ldi	r27, 0x00	; 0
 916:	eb e5       	ldi	r30, 0x5B	; 91
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	80 81       	ld	r24, Z
 91c:	80 62       	ori	r24, 0x20	; 32
 91e:	8c 93       	st	X, r24
}
 920:	0f 90       	pop	r0
 922:	0f 90       	pop	r0
 924:	0f 90       	pop	r0
 926:	cf 91       	pop	r28
 928:	df 91       	pop	r29
 92a:	08 95       	ret

0000092c <EXTI_u8Int0SetCallBack>:

/*This function enables the user to send the address of INT0 ISR to be stored in global variable*/
u8 EXTI_u8Int0SetCallBack(void (*Copy_pvInt0Func)(void))
{
 92c:	df 93       	push	r29
 92e:	cf 93       	push	r28
 930:	00 d0       	rcall	.+0      	; 0x932 <EXTI_u8Int0SetCallBack+0x6>
 932:	0f 92       	push	r0
 934:	cd b7       	in	r28, 0x3d	; 61
 936:	de b7       	in	r29, 0x3e	; 62
 938:	9b 83       	std	Y+3, r25	; 0x03
 93a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
 93c:	81 e0       	ldi	r24, 0x01	; 1
 93e:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pvInt0Func!=NULL)
 940:	8a 81       	ldd	r24, Y+2	; 0x02
 942:	9b 81       	ldd	r25, Y+3	; 0x03
 944:	00 97       	sbiw	r24, 0x00	; 0
 946:	39 f0       	breq	.+14     	; 0x956 <EXTI_u8Int0SetCallBack+0x2a>
	{
		EXTI_pvInt0Func=Copy_pvInt0Func;
 948:	8a 81       	ldd	r24, Y+2	; 0x02
 94a:	9b 81       	ldd	r25, Y+3	; 0x03
 94c:	90 93 61 00 	sts	0x0061, r25
 950:	80 93 60 00 	sts	0x0060, r24
 954:	02 c0       	rjmp	.+4      	; 0x95a <EXTI_u8Int0SetCallBack+0x2e>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
 956:	82 e0       	ldi	r24, 0x02	; 2
 958:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
 95a:	89 81       	ldd	r24, Y+1	; 0x01
}
 95c:	0f 90       	pop	r0
 95e:	0f 90       	pop	r0
 960:	0f 90       	pop	r0
 962:	cf 91       	pop	r28
 964:	df 91       	pop	r29
 966:	08 95       	ret

00000968 <__vector_1>:
/*Setting ISR of INT0*/
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
 968:	1f 92       	push	r1
 96a:	0f 92       	push	r0
 96c:	0f b6       	in	r0, 0x3f	; 63
 96e:	0f 92       	push	r0
 970:	11 24       	eor	r1, r1
 972:	2f 93       	push	r18
 974:	3f 93       	push	r19
 976:	4f 93       	push	r20
 978:	5f 93       	push	r21
 97a:	6f 93       	push	r22
 97c:	7f 93       	push	r23
 97e:	8f 93       	push	r24
 980:	9f 93       	push	r25
 982:	af 93       	push	r26
 984:	bf 93       	push	r27
 986:	ef 93       	push	r30
 988:	ff 93       	push	r31
 98a:	df 93       	push	r29
 98c:	cf 93       	push	r28
 98e:	cd b7       	in	r28, 0x3d	; 61
 990:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvInt0Func!=NULL)
 992:	80 91 60 00 	lds	r24, 0x0060
 996:	90 91 61 00 	lds	r25, 0x0061
 99a:	00 97       	sbiw	r24, 0x00	; 0
 99c:	29 f0       	breq	.+10     	; 0x9a8 <__vector_1+0x40>
	{
	EXTI_pvInt0Func();
 99e:	e0 91 60 00 	lds	r30, 0x0060
 9a2:	f0 91 61 00 	lds	r31, 0x0061
 9a6:	09 95       	icall
	}
	else
	{
		/*do nothing if user did not send ISR to INT0*/
	}
}
 9a8:	cf 91       	pop	r28
 9aa:	df 91       	pop	r29
 9ac:	ff 91       	pop	r31
 9ae:	ef 91       	pop	r30
 9b0:	bf 91       	pop	r27
 9b2:	af 91       	pop	r26
 9b4:	9f 91       	pop	r25
 9b6:	8f 91       	pop	r24
 9b8:	7f 91       	pop	r23
 9ba:	6f 91       	pop	r22
 9bc:	5f 91       	pop	r21
 9be:	4f 91       	pop	r20
 9c0:	3f 91       	pop	r19
 9c2:	2f 91       	pop	r18
 9c4:	0f 90       	pop	r0
 9c6:	0f be       	out	0x3f, r0	; 63
 9c8:	0f 90       	pop	r0
 9ca:	1f 90       	pop	r1
 9cc:	18 95       	reti

000009ce <EXTI_u8Int1SetCallBack>:

/*This function enables the user to send the address of INT1 ISR to be stored in global variable*/
u8 EXTI_u8Int1SetCallBack(void (*Copy_pvInt1Func)(void))
{
 9ce:	df 93       	push	r29
 9d0:	cf 93       	push	r28
 9d2:	00 d0       	rcall	.+0      	; 0x9d4 <EXTI_u8Int1SetCallBack+0x6>
 9d4:	0f 92       	push	r0
 9d6:	cd b7       	in	r28, 0x3d	; 61
 9d8:	de b7       	in	r29, 0x3e	; 62
 9da:	9b 83       	std	Y+3, r25	; 0x03
 9dc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
 9de:	81 e0       	ldi	r24, 0x01	; 1
 9e0:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pvInt1Func!=NULL)
 9e2:	8a 81       	ldd	r24, Y+2	; 0x02
 9e4:	9b 81       	ldd	r25, Y+3	; 0x03
 9e6:	00 97       	sbiw	r24, 0x00	; 0
 9e8:	39 f0       	breq	.+14     	; 0x9f8 <EXTI_u8Int1SetCallBack+0x2a>
	{
		EXTI_pvInt1Func=Copy_pvInt1Func;
 9ea:	8a 81       	ldd	r24, Y+2	; 0x02
 9ec:	9b 81       	ldd	r25, Y+3	; 0x03
 9ee:	90 93 63 00 	sts	0x0063, r25
 9f2:	80 93 62 00 	sts	0x0062, r24
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <EXTI_u8Int1SetCallBack+0x2e>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
 9f8:	82 e0       	ldi	r24, 0x02	; 2
 9fa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
 9fc:	89 81       	ldd	r24, Y+1	; 0x01
}
 9fe:	0f 90       	pop	r0
 a00:	0f 90       	pop	r0
 a02:	0f 90       	pop	r0
 a04:	cf 91       	pop	r28
 a06:	df 91       	pop	r29
 a08:	08 95       	ret

00000a0a <__vector_2>:
/*Setting ISR of INT1*/
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
 a0a:	1f 92       	push	r1
 a0c:	0f 92       	push	r0
 a0e:	0f b6       	in	r0, 0x3f	; 63
 a10:	0f 92       	push	r0
 a12:	11 24       	eor	r1, r1
 a14:	2f 93       	push	r18
 a16:	3f 93       	push	r19
 a18:	4f 93       	push	r20
 a1a:	5f 93       	push	r21
 a1c:	6f 93       	push	r22
 a1e:	7f 93       	push	r23
 a20:	8f 93       	push	r24
 a22:	9f 93       	push	r25
 a24:	af 93       	push	r26
 a26:	bf 93       	push	r27
 a28:	ef 93       	push	r30
 a2a:	ff 93       	push	r31
 a2c:	df 93       	push	r29
 a2e:	cf 93       	push	r28
 a30:	cd b7       	in	r28, 0x3d	; 61
 a32:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvInt1Func!=NULL)
 a34:	80 91 62 00 	lds	r24, 0x0062
 a38:	90 91 63 00 	lds	r25, 0x0063
 a3c:	00 97       	sbiw	r24, 0x00	; 0
 a3e:	29 f0       	breq	.+10     	; 0xa4a <__vector_2+0x40>
	{
	EXTI_pvInt1Func();
 a40:	e0 91 62 00 	lds	r30, 0x0062
 a44:	f0 91 63 00 	lds	r31, 0x0063
 a48:	09 95       	icall
	}
	else
	{
		/*do nothing if user did not send ISR to INT1*/
	}
}
 a4a:	cf 91       	pop	r28
 a4c:	df 91       	pop	r29
 a4e:	ff 91       	pop	r31
 a50:	ef 91       	pop	r30
 a52:	bf 91       	pop	r27
 a54:	af 91       	pop	r26
 a56:	9f 91       	pop	r25
 a58:	8f 91       	pop	r24
 a5a:	7f 91       	pop	r23
 a5c:	6f 91       	pop	r22
 a5e:	5f 91       	pop	r21
 a60:	4f 91       	pop	r20
 a62:	3f 91       	pop	r19
 a64:	2f 91       	pop	r18
 a66:	0f 90       	pop	r0
 a68:	0f be       	out	0x3f, r0	; 63
 a6a:	0f 90       	pop	r0
 a6c:	1f 90       	pop	r1
 a6e:	18 95       	reti

00000a70 <EXTI_u8Int2SetCallBack>:

/*This function enables the user to send the address of INT2 ISR to be stored in global variable*/
u8 EXTI_u8Int2SetCallBack(void (*Copy_pvInt2Func)(void))
{
 a70:	df 93       	push	r29
 a72:	cf 93       	push	r28
 a74:	00 d0       	rcall	.+0      	; 0xa76 <EXTI_u8Int2SetCallBack+0x6>
 a76:	0f 92       	push	r0
 a78:	cd b7       	in	r28, 0x3d	; 61
 a7a:	de b7       	in	r29, 0x3e	; 62
 a7c:	9b 83       	std	Y+3, r25	; 0x03
 a7e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
 a80:	81 e0       	ldi	r24, 0x01	; 1
 a82:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pvInt2Func!=NULL)
 a84:	8a 81       	ldd	r24, Y+2	; 0x02
 a86:	9b 81       	ldd	r25, Y+3	; 0x03
 a88:	00 97       	sbiw	r24, 0x00	; 0
 a8a:	39 f0       	breq	.+14     	; 0xa9a <EXTI_u8Int2SetCallBack+0x2a>
	{
		EXTI_pvInt2Func=Copy_pvInt2Func;
 a8c:	8a 81       	ldd	r24, Y+2	; 0x02
 a8e:	9b 81       	ldd	r25, Y+3	; 0x03
 a90:	90 93 65 00 	sts	0x0065, r25
 a94:	80 93 64 00 	sts	0x0064, r24
 a98:	02 c0       	rjmp	.+4      	; 0xa9e <EXTI_u8Int2SetCallBack+0x2e>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
 a9a:	82 e0       	ldi	r24, 0x02	; 2
 a9c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
 a9e:	89 81       	ldd	r24, Y+1	; 0x01
}
 aa0:	0f 90       	pop	r0
 aa2:	0f 90       	pop	r0
 aa4:	0f 90       	pop	r0
 aa6:	cf 91       	pop	r28
 aa8:	df 91       	pop	r29
 aaa:	08 95       	ret

00000aac <__vector_3>:
/*Setting ISR of INT2*/
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
 aac:	1f 92       	push	r1
 aae:	0f 92       	push	r0
 ab0:	0f b6       	in	r0, 0x3f	; 63
 ab2:	0f 92       	push	r0
 ab4:	11 24       	eor	r1, r1
 ab6:	2f 93       	push	r18
 ab8:	3f 93       	push	r19
 aba:	4f 93       	push	r20
 abc:	5f 93       	push	r21
 abe:	6f 93       	push	r22
 ac0:	7f 93       	push	r23
 ac2:	8f 93       	push	r24
 ac4:	9f 93       	push	r25
 ac6:	af 93       	push	r26
 ac8:	bf 93       	push	r27
 aca:	ef 93       	push	r30
 acc:	ff 93       	push	r31
 ace:	df 93       	push	r29
 ad0:	cf 93       	push	r28
 ad2:	cd b7       	in	r28, 0x3d	; 61
 ad4:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvInt2Func!=NULL)
 ad6:	80 91 64 00 	lds	r24, 0x0064
 ada:	90 91 65 00 	lds	r25, 0x0065
 ade:	00 97       	sbiw	r24, 0x00	; 0
 ae0:	29 f0       	breq	.+10     	; 0xaec <__vector_3+0x40>
	{
	EXTI_pvInt2Func();
 ae2:	e0 91 64 00 	lds	r30, 0x0064
 ae6:	f0 91 65 00 	lds	r31, 0x0065
 aea:	09 95       	icall
	}
	else
	{
		/*do nothing if user did not send ISR to INT2*/
	}
}
 aec:	cf 91       	pop	r28
 aee:	df 91       	pop	r29
 af0:	ff 91       	pop	r31
 af2:	ef 91       	pop	r30
 af4:	bf 91       	pop	r27
 af6:	af 91       	pop	r26
 af8:	9f 91       	pop	r25
 afa:	8f 91       	pop	r24
 afc:	7f 91       	pop	r23
 afe:	6f 91       	pop	r22
 b00:	5f 91       	pop	r21
 b02:	4f 91       	pop	r20
 b04:	3f 91       	pop	r19
 b06:	2f 91       	pop	r18
 b08:	0f 90       	pop	r0
 b0a:	0f be       	out	0x3f, r0	; 63
 b0c:	0f 90       	pop	r0
 b0e:	1f 90       	pop	r1
 b10:	18 95       	reti

00000b12 <GIE_voidState>:

#include "GIE_register.h"
#include "GIE_interface.h"

void GIE_voidState(u8 Copy_u8GIEState)
{
 b12:	df 93       	push	r29
 b14:	cf 93       	push	r28
 b16:	00 d0       	rcall	.+0      	; 0xb18 <GIE_voidState+0x6>
 b18:	0f 92       	push	r0
 b1a:	cd b7       	in	r28, 0x3d	; 61
 b1c:	de b7       	in	r29, 0x3e	; 62
 b1e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8GIEState)
 b20:	89 81       	ldd	r24, Y+1	; 0x01
 b22:	28 2f       	mov	r18, r24
 b24:	30 e0       	ldi	r19, 0x00	; 0
 b26:	3b 83       	std	Y+3, r19	; 0x03
 b28:	2a 83       	std	Y+2, r18	; 0x02
 b2a:	8a 81       	ldd	r24, Y+2	; 0x02
 b2c:	9b 81       	ldd	r25, Y+3	; 0x03
 b2e:	00 97       	sbiw	r24, 0x00	; 0
 b30:	69 f0       	breq	.+26     	; 0xb4c <GIE_voidState+0x3a>
 b32:	2a 81       	ldd	r18, Y+2	; 0x02
 b34:	3b 81       	ldd	r19, Y+3	; 0x03
 b36:	21 30       	cpi	r18, 0x01	; 1
 b38:	31 05       	cpc	r19, r1
 b3a:	79 f4       	brne	.+30     	; 0xb5a <GIE_voidState+0x48>
	{
	case (GIE_Enable):
			SET_BIT(SREG,SREG_I);
 b3c:	af e5       	ldi	r26, 0x5F	; 95
 b3e:	b0 e0       	ldi	r27, 0x00	; 0
 b40:	ef e5       	ldi	r30, 0x5F	; 95
 b42:	f0 e0       	ldi	r31, 0x00	; 0
 b44:	80 81       	ld	r24, Z
 b46:	80 68       	ori	r24, 0x80	; 128
 b48:	8c 93       	st	X, r24
 b4a:	07 c0       	rjmp	.+14     	; 0xb5a <GIE_voidState+0x48>
	break;
	case (GIE_Disable):
			CLR_BIT(SREG,SREG_I);
 b4c:	af e5       	ldi	r26, 0x5F	; 95
 b4e:	b0 e0       	ldi	r27, 0x00	; 0
 b50:	ef e5       	ldi	r30, 0x5F	; 95
 b52:	f0 e0       	ldi	r31, 0x00	; 0
 b54:	80 81       	ld	r24, Z
 b56:	8f 77       	andi	r24, 0x7F	; 127
 b58:	8c 93       	st	X, r24
	}
}
 b5a:	0f 90       	pop	r0
 b5c:	0f 90       	pop	r0
 b5e:	0f 90       	pop	r0
 b60:	cf 91       	pop	r28
 b62:	df 91       	pop	r29
 b64:	08 95       	ret

00000b66 <main>:
/*lighting a LED using interrupt*/

void INT2_ISR(void);

void main(void)
{
 b66:	df 93       	push	r29
 b68:	cf 93       	push	r28
 b6a:	cd b7       	in	r28, 0x3d	; 61
 b6c:	de b7       	in	r29, 0x3e	; 62
	/*pull-up activation for INT0 (PIND2) for push button*/
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN2,DIO_u8PIN_INPUT);
 b6e:	81 e0       	ldi	r24, 0x01	; 1
 b70:	62 e0       	ldi	r22, 0x02	; 2
 b72:	40 e0       	ldi	r20, 0x00	; 0
 b74:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN2,DIO_u8PIN_HIGH);
 b78:	81 e0       	ldi	r24, 0x01	; 1
 b7a:	62 e0       	ldi	r22, 0x02	; 2
 b7c:	41 e0       	ldi	r20, 0x01	; 1
 b7e:	0e 94 98 01 	call	0x330	; 0x330 <DIO_u8SetPinValue>
	/*output for LED on A0*/
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_OUTPUT);
 b82:	80 e0       	ldi	r24, 0x00	; 0
 b84:	60 e0       	ldi	r22, 0x00	; 0
 b86:	41 e0       	ldi	r20, 0x01	; 1
 b88:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinDirection>
	/*interrupt on INT0 initialization*/
	EXTI_voidInt2Init(Sense_FallingEdge);
 b8c:	82 e0       	ldi	r24, 0x02	; 2
 b8e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EXTI_voidInt2Init>
	/*Sending ISR of INT0*/
	EXTI_u8Int2SetCallBack(&INT2_ISR);
 b92:	81 ed       	ldi	r24, 0xD1	; 209
 b94:	95 e0       	ldi	r25, 0x05	; 5
 b96:	0e 94 38 05 	call	0xa70	; 0xa70 <EXTI_u8Int2SetCallBack>
	/*enable global interrupt*/
	GIE_voidState(GIE_Enable);
 b9a:	81 e0       	ldi	r24, 0x01	; 1
 b9c:	0e 94 89 05 	call	0xb12	; 0xb12 <GIE_voidState>
 ba0:	ff cf       	rjmp	.-2      	; 0xba0 <main+0x3a>

00000ba2 <INT2_ISR>:

	}
}

void INT2_ISR(void)
{
 ba2:	df 93       	push	r29
 ba4:	cf 93       	push	r28
 ba6:	cd b7       	in	r28, 0x3d	; 61
 ba8:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_OUTPUT);
 baa:	80 e0       	ldi	r24, 0x00	; 0
 bac:	60 e0       	ldi	r22, 0x00	; 0
 bae:	41 e0       	ldi	r20, 0x01	; 1
 bb0:	0e 94 98 01 	call	0x330	; 0x330 <DIO_u8SetPinValue>
}
 bb4:	cf 91       	pop	r28
 bb6:	df 91       	pop	r29
 bb8:	08 95       	ret

00000bba <_exit>:
 bba:	f8 94       	cli

00000bbc <__stop_program>:
 bbc:	ff cf       	rjmp	.-2      	; 0xbbc <__stop_program>
